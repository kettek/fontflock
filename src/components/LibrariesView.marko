import FontLoader from 'models/_FontLoader.js'
import scrollMonitor from 'scrollmonitor'

class {
  onCreate() {
    this.state = {
      unifiedLibraries: [],
      currentPageIndex: 0,
      currentPageAlpha: 'A',
      sortBy: 'alpha',
      loadedEntries: {},
      checkFontInView: 0,
      mounted: false,
    }
    this.handleFontLoaderUpdate = this.handleFontLoaderUpdate.bind(this)
  }
  onMount() {
    this.scrollMonitor = scrollMonitor.createContainer(this.getEl('Fonts'))
    this.state.mounted = true
    FontLoader.on('font-load', this.handleFontLoaderUpdate)
    this.update()
    this.forceUpdate()
  }
  onDestroy() {
    FontLoader.off('font-load', this.handleFontLoaderUpdate)
    this.scrollMonitor.destroy()
  }
  handleFontLoaderUpdate(data) {
    this.update()
    this.forceUpdate()
    console.log('should issue some sort of refresh')
    this.setStateDirty('loadedEntries')
  }
  isEntryInView(key, library, fontIndex) {
    let el = this.getEl(key)
    if (!el) return false

    let x = 0, y = 0
    while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
      x += el.offsetLeft - el.scrollLeft
      y += el.offsetTop - el.scrollTop
      el = el.offsetParent
    }

    let container = this.getEl('Fonts')

    if (y >= (container.scrollTop-container.offsetHeight*2) && y <= container.scrollTop+container.offsetHeight*2) {
      let familyID = library.getFamilyID(fontIndex)
      if (this.state.loadedEntries[key] === undefined) {
        this.state.loadedEntries[key] = FontLoader.load(familyID, library.getFontFaceCSS(fontIndex))
        this.setStateDirty('loadedEntries')
      }
      return this.state.loadedEntries[key]
    }
    return false
  }
  changeSort() {
    if (this.state.sortBy === 'alpha') {
      this.state.sortBy = 'numerical'
    } else {
      this.state.sortBy = 'alpha'
    }
  }
  setPage(index=0) {
    this.state.currentPageIndex = index
    this.update()
    this.forceUpdate()
  }
  setPageAlpha(alpha='A') {
    this.state.currentPageAlpha = alpha
    this.update()
    this.forceUpdate()
  }
  getUnifiedLibraries() {
    let fonts = []
    for (let index of this.input.selectedLibraries) {
      let library = this.input.libraries[index]
      if (!library) continue
      fonts = [...fonts, ...library.files.map((f,i) => {
        return {library: library, font: f, index: i}
      })]
    }
    fonts.sort((a,b)=>{
      if (a.font.title < b.font.title) return -1
      if (a.font.title > b.font.title) return 1
      return 0
    })
    return fonts
  }
  getUnifiedLibrariesAsAlpha(unified) {
    const alphabet = Array.from(Array(26)).map((e, i) => i + 65).map(c => String.fromCharCode(c))
    let results = {}
    for (let char of alphabet) {
      let charResults = unified.filter(v => v.font.title[0].toUpperCase() === char)
      if (charResults.length > 0) {
        results[char] = charResults
      }
    }
    return results
  }
  handleFontsScroll() {
    if (this.scrollCheckDelay) {
      clearTimeout(this.scrollCheckDelay)
      this.scrollCheckDelay = null
    }
    this.scrollCheckDelay = setTimeout(() => {
      this.setStateDirty('checkFontInView')
    }, this.input.scrollDelay)
  }
  handleFontGroupEntryEnter(key, library, fontIndex) {
    let familyID = library.getFamilyID(fontIndex)
    if (this.state.loadedEntries[key] === undefined) {
      this.state.loadedEntries[key] = FontLoader.load(familyID, library.getFontFaceCSS(fontIndex))
      this.setStateDirty('loadedEntries')
    }
  }
  handleFontGroupEntryExit(key, library, fontIndex) {
  }
}

$ let unified = component.getUnifiedLibraries(input.libraries)
div.LibrariesView
  div.Fonts key='Fonts' on-scroll('handleFontsScroll')
    table.Fonts__Table
      if(input.workspace && state.mounted)
        if(state.sortBy === 'alpha')
          $ let fonts = component.getUnifiedLibrariesAsAlpha(unified)[state.currentPageAlpha]
          if(fonts)
            for|entry| of=fonts
              $ let libraryIndex = entry.library
              $ let library = entry.library
              $ let font = entry.font
              $ let fontIndex = entry.index
              $ let fontKey = `${font.title}-${library.id}-${fontIndex}`
              FontGroupEntry key=fontKey fontIndex=fontIndex fontTitle=font.title library=library libraryTitle=library.title checkFontInView=state.checkFontInView previewText=input.previewText familyID=library.getFamilyID(fontIndex) scrollDelay=input.scrollDelay scrollMonitor=component.scrollMonitor on-enter('handleFontGroupEntryEnter', fontKey, library, fontIndex) on-exit('handleFontGroupEntryExit', fontKey, library, fontIndex) entry=state.loadedEntries[fontKey] unloadOnDestroy=true
          else
            div -- no results
        else
          for|entry, fontIndex| of=unified
            $ let libraryIndex = entry.library
            $ let library = input.libraries[libraryIndex]
            $ let font = entry.font
            tr class='Fonts__FamilyName'
              th -- ${font.title}
            tr.FontGroup__Entry key=`${libraryIndex}-${fontIndex}` checkFontInView
              if(state.loadedEntries[`${libraryIndex}-${fontIndex}`] || component.isEntryInView(`${libraryIndex}-${fontIndex}`))
                style -- $!{library.getCSS(fontIndex)}
                td.FontGroup__Entry__Example style={
                  'font-family': `"${library.getFamilyID(fontIndex)}", "Adobe NotDef"`,
                  'font-size': input.fontSize+input.fontSizeUnits,
                }
                  div style={overflow: 'auto'} -- ${input.previewText}
              else
                td.FontGroup__Entry__Example style={
                  'font-family': `"Adobe NotDef"`,
                  'font-size': input.fontSize+input.fontSizeUnits,
                }
                  div style={overflow: 'auto'} -- ${input.previewText}
  div.Pages
    div style='color:white' on-click('changeSort')
      if(state.sortBy === 'alpha')
        span -- alpha
      else
        span -- numerical
    if(state.sortBy === 'alpha')
      for|key,value| in=component.getUnifiedLibrariesAsAlpha(unified)
        div.Pages__Item title=value.length class={'-selected':key===state.currentPageAlpha} on-click('setPageAlpha', key) -- ${key}
    else
      span -- TODO

style {
  .LibrariesView {
    display: grid;
    grid-template-rows: minmax(0, 1fr) auto;
  }
  .FontGroup__Title {
    display: grid;
    grid-template-columns: minmax(0, 1fr) auto;
    grid-template-rows: minmax(0, 1fr);
  }
  .FontGroup__Title__Font {
  }
  .FontGroup__Title__Library {
  }
}