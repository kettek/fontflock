import { remote } from 'electron'

class {
  onCreate() {
    this.state = {
      showAddDialog: false,
      pendingDirectories: [],
      showEditDialog: false,
      editLibraryID: '',
    }
  }
  async add() {
    var targetPaths = remote.dialog.showOpenDialogSync({
      title: 'Add folders as libraries',
      properties: [
        'openDirectory',
        'multiSelections'
      ]
    })
    if (targetPaths && targetPaths.length > 0) {
        this.state.pendingDirectories = targetPaths
        this.state.showAddDialog = true
    }
  }
  closeAddDialog() {
    this.state.showAddDialog = false
    this.state.pendingDirectories = []
  }
  createLibrary(o) {
    this.emit('create',  o)
    this.closeAddDialog()
  }
  deleteLibrary(id) {
    // TODO: confirmation first.
    this.emit('delete', [id])
  }
  editLibrary(id) {
    this.state.showEditDialog = true
    this.state.editLibraryID = id
  }
  rescanLibrary(id) {
    this.input.libraries.find(l=>l.id===id).load()
  }
  closeEditDialog() {
    this.state.showEditDialog = false
  }
}

style {
  .Libraries {
    margin: .5em;
    border: 1px solid var(--list-bg);
    border-radius: .25em;
  }
  .Libraries.-focused {
    border-color: var(--primary);
  }
  .Libraries__Header {
    color: var(--list-fg);
    background: var(--list-bg);
    margin: .5em;
    display: grid;
    grid-template-columns: minmax(0, 1fr) auto;
  }
  .Libraries__Header__Title {
    padding: .5em;
  }
  .Libraries__Header__Add {
    cursor: pointer;
    display: flex;
    align-items: center;
    padding: .5em;
  }
  .Libraries__Info {
    margin: 0 .5em;
  }
  .Libraries__Entries {
    padding: .5em;
    padding-top: 0;
    margin: 0 .5em;
  }
  .Libraries__Entries__Item {
    display: grid;
    grid-template-columns: auto minmax(0, 1fr);
    align-items: center;
  }
  .Libraries__Entries__Item__Header {
    color: var(--list-fg);
    display: grid;
    grid-template-columns: minmax(0, 1fr) auto auto;
  }
  .Libraries__Entries__Item__Header__Text {
  }
  .Libraries__Entries__Item__Header__Count {
    color: #999;
    font-size: 85%;
    min-width: 1.5em;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .Libraries__Entries__Item__Header__Burger {
    display: flex;
    align-items: center;
    visibility: hidden;
  }
  .Libraries__Entries__Item:hover .Libraries__Entries__Item__Header__Burger {
    visibility: visible;
  }
}

context|{ t }| from='Locale'
  div.Libraries class={'-focused': input.focused} on-click(e=>component.emit('focus'))
    div.Libraries__Header
      span.Libraries__Header__Title -- ${t('libraries.labels.title')}
      div.Libraries__Header__Add on-click('add')
        Icon icon='add' size=1
    if(input.libraries.length === 0)
      div.Libraries__Info
        Notification noBorder icon='info' iconSize=2
          p -- ${t('libraries.descriptions.add-folders')}
    else
        div.Libraries__Entries
          for|library, libraryIndex| of=input.libraries
            div.Libraries__Entries__Item key=libraryIndex
              input.Libraries__Entries__Item__Active type='checkbox' checked=input.selectedLibraries.includes(libraryIndex) on-change(e=>component.emit(e.target.checked?'select':'unselect', libraryIndex))
              div.Libraries__Entries__Item__Header
                div.Libraries__Entries__Item__Header__Text -- ${library.title}
                div.Libraries__Entries__Item__Header__Count
                  if(!library.loaded)
                    Icon size=1.4 icon='loading' spin
                  else
                    span -- ${library.files.length}
                PopupButton hover
                  @button
                    div.Libraries__Entries__Item__Header__Burger
                      Icon size=1 icon='burger'
                  @body
                    div style={cursor: 'pointer'} on-click('editLibrary', library.id) -- ${t('libraries.labels.edit')}
                    div style={cursor: 'pointer'} on-click('rescanLibrary', library.id) -- ${t('libraries.labels.rescan')}
                    div style={cursor: 'pointer'} on-click('deleteLibrary', library.id) -- ${t('libraries.labels.delete')}
  if(state.showAddDialog)
    FloatingWindow on-close('closeAddDialog')
      @title
        span -- ${t('libraries.labels.add-libraries')}
      @body
        LibraryCreator on-close('closeAddDialog') on-create('createLibrary') directories=state.pendingDirectories
  if(state.showEditDialog)
    FloatingWindow on-close('closeEditDialog')
      @title
        span -- ${t('libraries.labels.edit-library')}
      @body
        LibraryEditor on-close('closeEditDialog') library=input.libraries.find(l=>l.id===state.editLibraryID)
