/**
 * FontGroupEntry is a component that manages displaying and loading a specific font within a library.
 */
import FontLoader from 'models/_FontLoader.js'
import scrollMonitor from 'scrollmonitor'
import FontErrorWatcher from 'models/_FontErrorWatcher.js'

class {
  onCreate() {
    this.state = {
      entry: null,
      error: null,
    }
    this.handleEnter = this.handleEnter.bind(this)
    this.handleExit = this.handleExit.bind(this)
    this.handleError = this.handleError.bind(this)
  }
  onMount() {
    let el = this.getEl('entry')
    this.watcher = this.input.scrollMonitor.create(el, 400)
    this.watcher.enterViewport(this.handleEnter)
    this.watcher.exitViewport(this.handleExit)
    FontErrorWatcher.on('font-error', this.handleError)
  }
  onDestroy() {
    FontErrorWatcher.off('font-error', this.handleError)
    this.watcher.destroy()
    if (this.state.entry && this.input.unloadOnDestroy) {
      document.fonts.delete(this.state.entry)
    }
  }
  /**
   * handleError is responsible for checking if a FontError matches this font's path. If so, the `error` state property is set to the message.
   */
  handleError(e) {
    if (e.path === this.input.library.getFontFaceNativePath(this.input.fontIndex)) {
      this.state.error = e.message
    }
  }
  /**
   * handleEnter is responsible for loading a new FontFace when the Font's main DOM element comes within view, the delay timer has expired, and the FontFace has not yet been loaded. Upon succesful load, the FontFace is added to document.fonts. Failure is captured and managed via handleError.
   */
  async handleEnter() {
    if (!this.state.entry) {
      if (this.scrollDelayTimer) {
        clearTimeout(this.scrollDelayTimer)
        this.scrollDelayTimer = null
      }
      this.scrollDelayTimer = setTimeout(() => {
        this.state.entry = new FontFace(this.input.familyID, this.input.library.getFontFaceCSS(this.input.fontIndex), {})
        ;(async () => {
          try {
            await this.state.entry.load()
            document.fonts.add(this.state.entry)
          } catch(err) {
            console.dir(err)
          }
          this.setStateDirty('entry')
        })()
      }, this.input.scrollDelay)
    }
  }
  /**
   * handleExit is responsible for deleting the loaded FontFace from the documents.fonts object, providing the `unloadOnExit` input property is defined.
   */
  handleExit() {
    if (this.input.unloadOnExit) {
      document.fonts.delete(this.state.entry)
      this.state.entry = null
    }
  }
}

tr class='Fonts__FamilyName'
  th.FontGroup__Title
    span.FontGroup__Title__Font class={'-error': state.error}
      span -- ${input.fontTitle}
      if(state.error)
        span.FontGroup__Title__Font__Error -- ${state.error}
    span.FontGroup__Title__Library -- ${input.libraryTitle}
tr.FontGroup__Entry key='entry' checkFontInView=input.checkFontInView
  if(!state.entry)
    td.FontGroup__Entry__Example style={
      'font-family': `"Adobe NotDef"`,
    }
      div style={overflow: 'auto'} -- ${input.previewText}
  else
    if(state.entry.status === 'loading')
      td.FontGroup__Entry__Example
        div -- loading...
    else-if(state.entry.status === 'loaded')
      td.FontGroup__Entry__Example style={
        'font-family': `"${input.familyID}", "Adobe NotDef"`,
      }
        div style={overflow: 'auto'} -- ${input.previewText}
    else-if(state.entry.status === 'unloaded')
      td.FontGroup__Entry__Example
        div -- unloaded
    else-if(state.entry.status === 'error')
      td.FontGroup__Entry__Example
        div -- ⎯⎯⎯⎯⎯⎯⎯⎯

style {
  .FontGroup__Entry { /* regular, bold, etc. */
    background: var(--list2-bg);
    color: var(--list2-fg);
  }
  .FontGroup__Title__Font.-error {
    color: #a00;
  }
  .FontGroup__Title__Font__Error {
    font-size: 10pt;
    font-weight: normal;
    padding-left: 1em;
    color: #a00;
  }
  .FontGroup__Entry__Example {
    font-size: var(--preview-font-size);
    background-color: var(--preview-background-color);
    color: var(--preview-foreground-color);
  }
}