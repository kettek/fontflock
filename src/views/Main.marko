import { ipcRenderer } from 'electron'
import * as fs from 'fs'
import * as path from 'path'
import { remote, shell } from 'electron'
import * as fontManager from '../../build/fontmanager.node'
import * as _Config from '../models/_Config'

import SystemFonts from 'models/_SystemFonts'
import Workspace from 'models/Workspace'

class {
  onCreate() {
    _Config.load({
      win: {
        x: 0,
        y: 0,
        width: 1280,
        height: 720,
        fullscreen: false,
      },
    })
    this.state = {
      awaitingFonts: true,
      systemFontStores: {},
      selectedSystemFontStores: [],
      text: 'The slow fat fox waits for the roll20',
      fontSize: 10,
      fontSizeUnits: 'pt',
      workspace: null,
      isCreating: false,
      isLoading: false,
      isLoadingSystemFontStores: false,
    }

    // Add hook for app closing.
    ipcRenderer.on('app-close', _ => {
      this.close()
    })
  }
  onMount() {
    this.state.isLoadingSystemFontStores = true
    ;(async ()=>{
      this.state.systemFontStores = await SystemFonts.load()
      this.state.isLoadingSystemFontStores = false
    })()
    if (_Config.settings.wsPath) {
      (async ()=>{
        this.state.isLoading = true
        try {
          await this.loadWorkspace(_Config.settings.wsPath)
          this.state.isLoading = false
        } catch (e) {
          this.state.isLoading = false
          // TODO: Error notification!
        }
      })()
    }
  }
  async close() {
    // Do cleanup
    // return // return early on failure
    await _Config.save(true)
    ipcRenderer.send('closed')
  }
  setText(e) {
    this.state.text = e.target.value
  }
  setSize(e) {
    this.state.fontSize = Number(e.target.value)
  }
  setUnits(e) {
    this.state.fontSizeUnits = e.target.value
  }
  revealFont(fontPath) {
    shell.showItemInFolder(fontPath)
  }
  showWorkspaceCreator() {
    this.state.isCreating = true
  }
  closeWorkspaceCreator() {
    this.state.isCreating = false
  }
  async openWorkspace() {
    var targetPath = remote.dialog.showOpenDialogSync({
      title: 'Open a Workspace',
      filters: [
        {
          name: 'FontFlock Workspace', extensions: ['ffws'],
        }
      ],
    })
    if (targetPath) {
      await this.loadWorkspace(targetPath[0])
    }
  }
  async loadWorkspace(wsPath) {
    let ws = new Workspace(wsPath, {})
    for (const event of ['library-create', 'library-delete', 'library-load', 'library-unload']) {
      ws.on(event, () => {
        this.setStateDirty('workspace')
      })
    }
    await ws.load()
    this.state.workspace = ws
    _Config.settings.wsPath = wsPath
  }
  async createWorkspace(o) {
    let ws = new Workspace(o.path, o.ws)

    await ws.save(true)

    this.state.workspace = ws
    _Config.settings.wsPath = o.path

    this.closeWorkspaceCreator()
  }
  async createLibraries(o) {
    for (let l of o) {
      this.state.workspace.createLibrary(l)
    }
  }
  async deleteLibraries(ids) {
    for (let id of ids) {
      this.state.workspace.deleteLibrary(id)
    }
  }
  onSelectedSystemFontStore(which) {
    if (!this.state.selectedSystemFontStores.includes(which)) {
      this.state.selectedSystemFontStores.push(which)
      this.setStateDirty('selectedSystemFontStores')
    }
  }
  onUnselectedSystemFontStore(which) {
    let index = this.state.selectedSystemFontStores.indexOf(which)
    if (index >= 0) {
      this.state.selectedSystemFontStores.splice(index, 1)
      this.setStateDirty('selectedSystemFontStores')
    }
  }
}

style {
  :root {
    --primary: #51789d;
    --secondary: #0c1a13;
    --tertiary: #667e94;
    --quaternary: #f3e5ec;
    --list-fg: #d3d3d3;
    --list-bg: #242424;
    --list2-fg: #c3c3c3;
    --list2-bg: #141414;
  }
  @font-face {
    font-family: 'PT Sans';
    font-style: normal;
    font-weight: 400;
    src: url('../assets/fonts/PTSans-Regular.ttf');
  }
  @font-face {
    font-family: 'PT Sans';
    font-style: italic;
    font-weight: 400;
    src: url('../assets/fonts/PTSans-Italic.ttf');
  }
  @font-face {
    font-family: 'PT Sans';
    font-style: normal;
    font-weight: 700;
    src: url('../assets/fonts/PTSans-Bold.ttf');
  }
  @font-face {
    font-family: 'PT Sans';
    font-style: italic;
    font-weight: 700;
    src: url('../assets/fonts/PTSans-BoldItalic.ttf');
  }
  @font-face {
    font-family: 'Adobe NotDef';
    src: url('../assets/fonts/adobe-notdef/AND-Regular.ttf');
  }
  * {
    box-sizing: border-box;
  }
  html {
    height: 100%;
  }
  body {
    background-color: black;
    color: var(--secondary);
    margin: 0;
    height: 100%;
    display: grid;
    grid-template-rows: auto minmax(0, 1fr);
    grid-template-columns: minmax(0, 1fr);
    overflow: hidden;
    font-family: 'PT Sans', sans-serif;
  }
  [draggable] {
    user-select: none;
  }
  button {
    border: 0;
    border-radius: 0;
    background: #040404;
    color: #c2c2c2;
  }
  input, select {
    background: #040404;
    color: #c2c2c2;
    border: 1px solid transparent;
    padding: .25em;
    margin: .1em;
  }
  .Main {
    display: grid;
    grid-template-rows: minmax(0, 1fr);
    grid-template-columns: auto minmax(0, 1fr);
    position: relative;
  }
  .Main__Left {
    max-width: 30vw;
    min-width: 20em;
  }
  .Main__Right {
    display: grid;
    grid-template-rows: auto minmax(0, 1fr);
    grid-template-columns: minmax(0, 1fr);
  }
  .Fonts {
    display: grid;
    grid-template-columns: minmax(0, 1fr);
    grid-template-rows: minmax(0, 1fr);
    overflow: auto;
  }
  .Fonts__Table {
    position: relative;
    border-collapse: collapse;
  }
  .Fonts__Header th {
    background: var(--list-bg);
    color: var(--list-fg);
    position: sticky;
    top: 0;
  }
  .Fonts__FamilyName {
    background: var(--list2-bg);
  }
  .Fonts__FamilyName th {
    background: var(--list2-bg);
    color: var(--list2-fg);
    position: sticky;
    text-align: left;
    top: 2.75ex;
  }
  .FontGroup {
  }
  .FontGroup__Entry { /* regular, bold, etc. */
    background: var(--list2-bg);
    color: var(--list2-fg);
  }
  .FontGroup__Entry__Example {
    color: black;
    background: white;
    font-size: 20em;
  }
  .WorkspaceNotifier {
    margin: .5em;
    border: 1px solid var(--list-bg);
    border-radius: .25em;
    text-align: center;
  }
  .WorkspaceNotifier__Button {
    color: #fff;
    font-weight: bold;
    font-size: 100%;
  }
  .WorkspaceNotifier__Content {
    color: var(--list-fg);
    padding: .5em;
    margin: .5em;
  }
}

Titlebar title='fontflock'
  @menu
    if(state.workspace)
      div.Titlebar__Controls__Button -- ${state.workspace.title}
    else
      div.Titlebar__Controls__Button -- Workspace...
div.Main
  div.Main__Left
    if(state.isLoadingSystemFontStores)
      div.WorkspaceNotifier
        div.WorkspaceNotifier__Content
          div -- Loading System Fonts...
    else
      SystemFonts fontStores=state.systemFontStores selectedSystemFontStores=state.selectedSystemFontStores on-select('onSelectedSystemFontStore') on-unselect('onUnselectedSystemFontStore')
    if(state.isLoading)
      div.WorkspaceNotifier
        div.WorkspaceNotifier__Content
          div -- Loading...
    else-if(!state.workspace)
      div.WorkspaceNotifier
        div.WorkspaceNotifier__Content
          button.WorkspaceNotifier__Button on-click('showWorkspaceCreator') -- Create a Workspace
          button.WorkspaceNotifier__Button on-click('openWorkspace') -- Open a Workspace
          div -- Workspaces store libraries, collections, and more.
    else
      Libraries libraries=state.workspace.libraries on-create('createLibraries') on-delete('deleteLibraries')
      Collections collections=state.workspace.collections
  div.Main__Right
    PreviewSettings fontSize=state.fontSize fontSizeUnits=state.fontSizeUnits previewText=state.text on-change-text('setText') on-change-size('setSize') on-change-units('setUnits')
    div.Fonts
      table.Fonts__Table
        tbody
          tr class='Fonts__Header'
            th -- Example Text
            th -- Info
            th -- Controls
          for|fontStorePath, fontStore| in=state.systemFontStores
            if(state.selectedSystemFontStores.includes(fontStorePath))
              for|fontFamilyName, fontFamily| in=fontStore
                tr class='Fonts__FamilyName'
                  th -- ${fontFamilyName}
                for|fontEntry, fontIndex| of=fontFamily.entries
                  tr.FontGroup__Entry key=fontIndex
                    td.FontGroup__Entry__Example style={
                      'font-family': `"${fontFamilyName}", "Adobe NotDef"`,
                      'font-size': state.fontSize+state.fontSizeUnits,
                      'font-weight': fontEntry.weight+'',
                      'font-style': fontEntry.italic?'italic':'',
                    }
                      div style={overflow: 'auto'} -- ${state.text}
                    td.FontGroup__Entry__Properties
                      table
                        tbody
                          tr
                            td -- ${fontEntry.weight}
                            td -- ${fontEntry.italic?'i':''}
                    td.FontGroup__Entry__Controls
                      button on-click('revealFont', fontEntry.path) -- reveal
  if(state.isCreating)
    FloatingWindow on-close('closeWorkspaceCreator')
      @title
        span -- Create a Workspace
      @body
        WorkspaceCreator on-close('closeWorkspaceCreator') on-create('createWorkspace')
